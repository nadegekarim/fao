private List<ImportationDonneeVM> RemplieList()
{
    List<ImportationDonneeVM> importationDonneeList = new List<ImportationDonneeVM>();
    Encoding encode = Encoding.GetEncoding("utf-8");

    // --- Étape 1 : Lecture des Onglets ---
    using (StreamReader datasTXT = new StreamReader(Data.InputFile.Open(), encode))
    {
        string fileName = Data.InputFile.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 5)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "5"));

            uint idOnglet = Convert.ToUInt32(valeurs[0]);
            string libelleOnglet = valeurs[1];
            uint positionOnglet = Convert.ToUInt32(valeurs[2]);
            string recapOnglet = valeurs[3];
            uint idModele = Convert.ToUInt32(Data.IdModele);

            importationDonneeList.Add(new ImportationDonneeVM
            {
                IdtMdE = idModele,
                IdtOng = idOnglet,
                TitOng = libelleOnglet,
                PosOng = (int)positionOnglet,
                RcpOng = recapOnglet
            });
        }
    }

    // --- Étape 2 : Lecture des Blocs ---
    using (StreamReader datasTXT = new StreamReader(Data.InputFileBlo.Open(), encode))
    {
        string fileName = Data.InputFileBlo.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 12)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "12"));

            uint idBloc = Convert.ToUInt32(valeurs[0]);
            uint idParentBloc = Convert.ToUInt32(valeurs[1]);
            string titreBloc = valeurs[2];
            string visible = valeurs[3];
            string typeBloc = valeurs[4];
            string optionBloc = valeurs[5];
            uint ordreBloc = Convert.ToUInt32(valeurs[6]);
            string affichCertifBloc = valeurs[7];
            string affichBloc = valeurs[8];
            string recapBloc = valeurs[9];
            uint idOngletBloc = Convert.ToUInt32(valeurs[10]);
            string libelleBloc = valeurs[11];

            var onglet = importationDonneeList.FirstOrDefault(o => o.IdtOng == idOngletBloc);
            if (onglet != null)
            {
                onglet.Blocs.Add(new BlocVM
                {
                    IdtBlo = idBloc,
                    IdtPntBlo = idParentBloc,
                    TitBlo = titreBloc,
                    VsbBlo = visible,
                    TypBlo = typeBloc,
                    OpnBlo = optionBloc,
                    OrdBlo = (int)ordreBloc,
                    AfgCer = affichCertifBloc,
                    AfgBlo = affichBloc,
                    RcpBlo = recapBloc,
                    LibBlo = libelleBloc
                });
            }
        }
    }

    // --- Étape 3 : Lecture des Données ---
    using (StreamReader datasTXT = new StreamReader(Data.InputFileDon.Open(), encode))
    {
        string fileName = Data.InputFileDon.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 19)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "19"));

            uint idDon = Convert.ToUInt32(valeurs[0]);
            string libelleDon = valeurs[3];
            string typeDon = valeurs[4];
            string typeCplDn = valeurs[5];
            string affichDon = valeurs[6];
            string persDon = valeurs[7];
            string valeurInitDon = valeurs[8];
            string objectifsDon = valeurs[9];
            uint idParentDon = Convert.ToUInt32(valeurs[10]);
            uint idBlocDon = Convert.ToUInt32(valeurs[11]);
            string tooltipDon = valeurs[12];
            string libelleRecapDon = valeurs[13];
            string labelInfoDon = valeurs[14];
            string obligDon = valeurs[15];
            string auteurDon = valeurs[16];
            string valeurMinDon = valeurs[17];
            string valeurMaxDon = valeurs[18];

            // On cherche le bloc correspondant dans tous les onglets
            var bloc = importationDonneeList
                .SelectMany(o => o.Blocs)
                .FirstOrDefault(b => b.IdtBlo == idBlocDon);

            if (bloc != null)
            {
                bloc.Donnees.Add(new DonneeVM
                {
                    IdtDon = idDon,
                    LibDon = libelleDon,
                    TypDon = typeDon,
                    TypCplDon = typeCplDn,
                    AfgDon = affichDon,
                    PrsDon = persDon,
                    ValInitialeDon = valeurInitDon,
                    ObjectifsDon = objectifsDon,
                    IdtPntDon = idParentDon,
                    TtpDon = tooltipDon,
                    LibRcpDon = libelleRecapDon,
                    LblIfrDon = labelInfoDon,
                    OblDon = obligDon,
                    AurDon = auteurDon,
                    ValeurMinDon = valeurMinDon,
                    ValeurMaxDon = valeurMaxDon
                });
            }
        }
    }

    return importationDonneeList;
}
