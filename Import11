private List<ImportationDonneeVM> RemplieList()
{
    List<ImportationDonneeVM> importationDonneeList = new List<ImportationDonneeVM>();
    Encoding encode = Encoding.GetEncoding("utf-8");

    // --- Étape 1 : Lecture des Onglets ---
    var onglets = new Dictionary<uint, (uint idModele, string libelle, int position, string recap)>();
    using (StreamReader datasTXT = new StreamReader(Data.InputFile.Open(), encode))
    {
        string fileName = Data.InputFile.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 5)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "5"));

            uint idOnglet = Convert.ToUInt32(valeurs[0]);
            uint idModele = Convert.ToUInt32(Data.IdModele);
            string libelleOnglet = valeurs[1];
            int positionOnglet = Convert.ToInt32(valeurs[2]);
            string recapOnglet = valeurs[3];

            onglets[idOnglet] = (idModele, libelleOnglet, positionOnglet, recapOnglet);
        }
    }

    // --- Étape 2 : Lecture des Blocs ---
    var blocs = new Dictionary<uint, (uint idParentBloc, string titre, string visible, string type, string option, int ordre, string affichCertif, string affichBloc, string recap, uint idOnglet, string libelle)>();
    using (StreamReader datasTXT = new StreamReader(Data.InputFileBlo.Open(), encode))
    {
        string fileName = Data.InputFileBlo.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 12)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "12"));

            uint idBloc = Convert.ToUInt32(valeurs[0]);
            uint idParentBloc = Convert.ToUInt32(valeurs[1]);
            string titreBloc = valeurs[2];
            string visible = valeurs[3];
            string typeBloc = valeurs[4];
            string optionBloc = valeurs[5];
            int ordreBloc = Convert.ToInt32(valeurs[6]);
            string affichCertifBloc = valeurs[7];
            string affichBloc = valeurs[8];
            string recapBloc = valeurs[9];
            uint idOngletBloc = Convert.ToUInt32(valeurs[10]);
            string libelleBloc = valeurs[11];

            blocs[idBloc] = (idParentBloc, titreBloc, visible, typeBloc, optionBloc, ordreBloc, affichCertifBloc, affichBloc, recapBloc, idOngletBloc, libelleBloc);
        }
    }

    // --- Étape 3 : Lecture des Données ---
    using (StreamReader datasTXT = new StreamReader(Data.InputFileDon.Open(), encode))
    {
        string fileName = Data.InputFileDon.FileName;
        int lineNumber = 0;
        while (!datasTXT.EndOfStream)
        {
            lineNumber++;
            string ligne = datasTXT.ReadLine();
            string[] valeurs = ligne.Split(';');

            if (valeurs.Length != 19)
                throw new UserException(UserMessages.DataPerLineModele(I18N.Translate(fileName), "19"));

            uint idDon = Convert.ToUInt32(valeurs[0]);
            string libelleDon = valeurs[3];
            string typeDon = valeurs[4];
            string typeCplDn = valeurs[5];
            string affichDon = valeurs[6];
            string persDon = valeurs[7];
            string valeurInitDon = valeurs[8];
            string objectifsDon = valeurs[9];
            uint idParentDon = Convert.ToUInt32(valeurs[10]);
            uint idBlocDon = Convert.ToUInt32(valeurs[11]);
            string tooltipDon = valeurs[12];
            string libelleRecapDon = valeurs[13];
            string labelInfoDon = valeurs[14];
            string obligDon = valeurs[15];
            string auteurDon = valeurs[16];
            string valeurMinDon = valeurs[17];
            string valeurMaxDon = valeurs[18];

            if (!blocs.ContainsKey(idBlocDon))
                continue;

            var bloc = blocs[idBlocDon];
            var onglet = onglets.ContainsKey(bloc.idOnglet) ? onglets[bloc.idOnglet] : default;

            // ✅ On crée un objet complet par donnée
            importationDonneeList.Add(new ImportationDonneeVM
            {
                // Onglet
                IdtMdE = onglet.idModele,
                IdtOng = bloc.idOnglet,
                TitOng = onglet.libelle,
                PosOng = onglet.position,
                RcpOng = onglet.recap,

                // Bloc
                IdtBlo = idBlocDon,
                IdtPntBlo = bloc.idParentBloc,
                TitBlo = bloc.titre,
                VsbBlo = bloc.visible,
                TypBlo = bloc.type,
                OpnBlo = bloc.option,
                OrdBlo = bloc.ordre,
                AfgCer = bloc.affichCertif,
                AfgBlo = bloc.affichBloc,
                RcpBlo = bloc.recap,
                LibBlo = bloc.libelle,

                // Donnée
                IdtDon = idDon,
                LibDon = libelleDon,
                TypDon = typeDon,
                TypCplDon = typeCplDn,
                AfgDon = affichDon,
                PrsDon = persDon,
                ValInitialeDon = valeurInitDon,
                ObjectifsDon = objectifsDon,
                IdtPntDon = idParentDon,
                TtpDon = tooltipDon,
                LibRcpDon = libelleRecapDon,
                LblIfrDon = labelInfoDon,
                OblDon = obligDon,
                AurDon = auteurDon,
                ValeurMinDon = valeurMinDon,
                ValeurMaxDon = valeurMaxDon
            });
        }
    }

    return importationDonneeList;
}
